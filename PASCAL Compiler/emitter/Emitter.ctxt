#BlueJ class context
comment0.target=Emitter
comment0.text=\n\ The\ Emitter\ class\ writes\ code\ to\ an\ output\ file.\n\ \n\ @author\ Skeleton\ provided\ by\ Anu\ Datar\n\ @version\ 12/01/2023\n
comment1.params=outputFileName\ p
comment1.target=Emitter(java.lang.String,\ ast.Program)
comment1.text=\n\ The\ Emitter\ constructor\ creates\ sets\ the\ idCounter\ to\ 0\ and\ cretes\ a\n\ new\ PrintWriter\ object\ for\ the\ given\ output\ file.\n\ \n\ @param\ outputFileName\ the\ file\ name\ for\ the\ outputted\ MIPS\ code\n\ @param\ p\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ program\n
comment10.params=varName
comment10.target=boolean\ isLocalVariable(java.lang.String)
comment10.text=\n\ The\ isLocalVariable\ sees\ if\ a\ given\ string\ is\ a\ local\ variable\ by\ seeing\n\ if\ the\ name\ matchs\ the\ current\ procedure\ name\ or\ if\ it\ is\ a\ part\ of\ the\n\ local\ variables\ in\ the\ current\ procedure.\ Otherwise,\ if\ the\ variable\n\ is\ not\ a\ local\ variable,\ the\ variable\ is\ added\ to\ the\ list\ of\ variables\ \n\ for\ the\ procudure.\ \n\ \n\ @param\ varName\ the\ variable\ to\ check\n\ @return\ true\ if\ the\ given\ variable\ is\ a\ local\ variable;\ otherwise\ false\n
comment11.params=localVarName
comment11.target=int\ getOffset(java.lang.String)
comment11.text=\n\ The\ getOffset()\ method\ determines\ the\ offset\ required\ on\ the\ stack\n\ due\ to\ the\ variables.\n\ \n\ @param\ localVarName\ the\ name\ of\ a\ local\ variable\ for\ the\ current\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ procedure\n\ @return\ the\ offset\n
comment2.params=code
comment2.target=void\ emit(java.lang.String)
comment2.text=\n\ The\ emit()\ writes\ the\ given\ line\ of\ code\ to\ the\ file.\n\ \n\ @param\ code\ the\ line\ of\ code\n
comment3.params=
comment3.target=void\ close()
comment3.text=\n\ The\ close()\ method\ closes\ the\ file\ written\ by\ PrintWriter.\n\ \n\ @precondition\ all\ code\ is\ written\ to\ the\ file\n
comment4.params=reg
comment4.target=void\ emitPush(java.lang.String)
comment4.text=\n\ The\ emitPush()\ method\ writes\ code\ to\ push\ whatever\ is\ stored\ in\ a\ given\n\ register\ to\ the\ stack.\n\ \n\ @param\ reg\ push\ the\ contents\ of\ this\ register\ to\ the\ stack\n
comment5.params=reg
comment5.target=void\ emitPop(java.lang.String)
comment5.text=\n\ The\ emitPop()\ method\ writes\ code\ to\ pop\ whatever\ is\ stored\ on\ the\ stack\n\ to\ a\ given\ register.\n\ \n\ @param\ reg\ pop\ the\ contents\ of\ the\ stack\ to\ this\ register\n
comment6.params=
comment6.target=void\ emitNewLine()
comment6.text=\n\ The\ emitNewLine()\ method\ writes\ MIPS\ code\ to\ emit\ a\ new\ line\ in\ the\n\ program.\n
comment7.params=
comment7.target=int\ nextLabelId()
comment7.text=\n\ The\ nextLabelID()\ method\ keeps\ track\ of\ the\ idCounter\ for\ the\ If/While\n\ labels.\n\ \n\ @return\ the\ next\ idCounter\n
comment8.params=proc
comment8.target=void\ setProcedureContext(ast.ProcedureDeclaration)
comment8.text=\n\ The\ setProcedureContext()\ method\ sets\ the\ given\ declaration\ as\ the\n\ current\ procedure\ context,\ which\ changes\ the\ next\ lines\ of\ MIPS\ code.\n\ \n\ @param\ proc\ the\ procedure\ declaration\n\ \n
comment9.params=
comment9.target=void\ clearProcedureContext()
comment9.text=\n\ The\ clearProcudureContext()\ method\ clears\ the\ current\ procedure\ context.\n
numComments=12
