#BlueJ class context
comment0.target=Parser
comment0.text=\n\ The\ Parser\ class\ represents\ the\ second\ phase\ of\ a\ compiler.\ It\ uses\ the\ tokens\n\ created\ by\ the\ Scanner\ and\ parses\ through\ them.\ It\ also\ uses\ a\ grammar\ to\n\ do\ this.\n\n\ @author\ Sanaa\ Bhorkar\n\ @version\ 09/25/2023\n
comment1.params=s
comment1.target=Parser(scanner.Scanner)
comment1.text=\n\ The\ Parser\ constructor\ takes\ in\ a\ Scanner\ and\ asks\ it\ for\ the\ next\ \n\ token.\ This\ token\ is\ saved\ as\ the\ current\ token.\n\ \n\ @param\ s\ the\ Scanner\ used\n
comment2.params=expectedToken
comment2.target=void\ eat(java.lang.String)
comment2.text=\n\ The\ eat()\ method\ takes\ in\ a\ string,\ representing\ the\ expected\ token,\n\ and\ checks\ to\ see\ if\ it\ is\ the\ current\ token.\ If\ it\ does,\ the\ parser\n\ asks\ the\ scanner\ for\ the\ next\ token.\ Otherwise,\ it\ throws\ an\ illegal\n\ argument\ exception.\n\ \n\ @param\ expectedToken\ is\ what\ the\ parser\ is\ meant\ to\ eat\n
comment3.params=
comment3.target=ast.Program\ parseProgram()
comment3.text=\n\ The\ parseProgram()\ method\ is\ the\ starting\ line\ in\ the\ grammar.\ It\n\ parses\ through\ PROCEDURE\ and\ other\ statements.\ It\ calls\ upon\n\ parseStatement()\ as\ it\ is\ the\ next\ line\ in\ the\ grammar.\n\ \n\ @precondition\ \ current\ token\ begins\ a\ program\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ program\n\ @return\ a\ Program\ object\ for\ the\ program\n
comment4.params=
comment4.target=ast.Statement\ parseStatement()
comment4.text=\n\ The\ parseStatement()\ method\ is\ a\ line\ in\ the\ grammar.\ It\n\ parses\ through\ BEGIN/END\ statements,\ WRITELN\ statements,\ and\ assigns\n\ variables.\ It\ calls\ upon\ parseExpression()\ as\ it\ is\ the\ next\n\ line\ in\ the\ grammar.\n\ \n\ @precondition\ \ current\ token\ begins\ a\ statement\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ statement\n\ @return\ a\ statement\ object\ for\ the\ statement\n
comment5.params=
comment5.target=ast.Expression\ parseExpression()
comment5.text=\n\ The\ parseExpression()\ method\ is\ a\ line\ in\ the\ grammar.\ It\n\ parses\ through\ any\ sums\ or\ differences.\ By\ the\ end\ of\ the\ method,\ \n\ the\ number\ that\ the\ expression\ is\ equal\ to\ is\ returned.\ It\ calls\ upon\ \n\ parseTerm()\ as\ it\ is\ the\ next\ line\ in\ the\ grammar.\n\ \n\ @precondition\ \ current\ token\ is\ an\ expression\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ expression\n\ @return\ an\ expression\ object\ for\ the\ expression\n
comment6.params=
comment6.target=ast.Expression\ parseTerm()
comment6.text=\n\ The\ parseTerm()\ method\ is\ a\ line\ in\ the\ grammar.\ It\n\ parses\ through\ any\ products,\ quotients,\ or\ mods.\ By\ the\ end\ of\ the\ \n\ method,\ the\ number\ that\ the\ expression\ is\ equal\ to\ is\ returned.\ It\ \n\ calls\ upon\ parseFactor()\ as\ it\ is\ the\ next\ line\ in\ the\ grammar.\n\ \n\ @precondition\ \ current\ token\ is\ a\ term\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ term\n\ @return\ an\ expression\ object\ that\ represents\ the\ term\n
comment7.params=
comment7.target=ast.Expression\ parseFactor()
comment7.text=\n\ The\ parseFactor()\ method\ is\ a\ line\ in\ the\ grammar.\ It\n\ parses\ through\ any\ negatives\ or\ ().\ By\ the\ end\ of\ the\ method,\ \n\ the\ number\ that\ the\ factor\ is\ equal\ to\ is\ returned.\ It\ calls\ upon\ \n\ parseNumber()\ as\ it\ is\ the\ next\ line\ in\ the\ grammar.\n\ \n\ @precondition\ \ current\ token\ is\ a\ factor\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ factor\n\ @return\ an\ expression\ object\ that\ represents\ the\ factor\n
comment8.params=
comment8.target=ast.Condition\ parseCondition()
comment8.text=\n\ The\ parseCondition()\ method\ is\ a\ line\ in\ the\ grammar.\ It\ finds\ the\n\ relop\ and\ the\ two\ expressions\ and\ passes\ it\ to\ a\ new\ Condition\n\ object\ that\ it\ then\ returns.\n\ \n\ @precondition\ \ current\ token\ is\ a\ condition\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ condition\n\ @return\ a\ condition\ object\ that\ represents\ the\ condition\n
comment9.params=
comment9.target=ast.Number\ parseNumber()
comment9.text=\n\ The\ parseNumber()\ method\ checks\ to\ see\ if\ the\ current\ token\ is\ a\ \n\ number.\ If\ it\ isn't,\ it\ will\ throw\ an\ exception.\ Otherwise,\ it\ will\n\ call\ the\ eat()\ method\ and\ return\ the\ number\ parsed.\n\ \n\ @precondition\ \ current\ token\ is\ a\ number\n\ @postcondition\ current\ token\ is\ the\ first\ one\ after\ the\ number\n\ @return\ a\ number\ object\n
numComments=10
