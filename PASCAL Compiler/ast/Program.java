package ast;
import java.util.*;
import environment.*;
import emitter.*;

/**
 * The Program class represents the root of the AST nodes and contains a list
 * of the procedure declarations as well as the statement that follows the
 * procedure declarations.
 * 
 * @author Sanaa Bhorkar
 * @version 10/31/2023
 */
public class Program
{
    //instance variables
    private List<String> vars;
    private List<ProcedureDeclaration> proDecs;
    private Statement stmt;

    /**
     * The Program constructor creates a new Program object and instantiates
     * the two instance variables: the list of procedure declarations as well
     * as the statement that follows the procedure declarations. 
     * 
     * @param vars    the list of variables in the program
     * @param proDecs the list of procedure declarations
     * @param stmt    the statement that follows proDecs
     * @postcondition a new Program object is created
     */
    public Program(List<String> vars, List<ProcedureDeclaration> proDecs, Statement stmt)
    {
        this.vars = vars;
        this.proDecs = proDecs;
        this.stmt = stmt;
    }
    
    /**
     * The addVars() method adds a given variable to the list of variables after
     * determining it is not a local variable.
     * 
     * @param str the parameter that is not a local variable
     */
    public void addVars(String str)
    {
        if (!vars.contains(str))
        {
            vars.add(str);
        }
    }
    
    /**
     * The exec() method executes the program by executing each program
     * declaration in the list and then executing the statement that follows.
     * 
     * @param env the given environment
     * @postcondition everything in the program has executed, meaning the 
     *                entire code file has executed
     */
    public void exec(Environment env)
    {
        for (ProcedureDeclaration proDec: proDecs)
        {
            proDec.exec(env);
        }
        stmt.exec(env);
    }

    /**
     * The compile() method creates the structure for the converted MIPS
     * code for the program. It uses an emitter to create the JavaDoc, 
     * a .data section for all the variables in the program, and the main 
     * label. It also has the termination for MIPS.
     * 
     * @param output the name of the output file for the converted MIPS code
     */
    public void compile(String output)
    {
        Emitter e = new Emitter(output, this);
        e.emit("# This code is autogenerated by a PASCAL compiler from a source file.");
        e.emit("# @author Sanaa Bhorkar");
        Date today = new Date();
        e.emit("# @version " + today.toString());
        e.emit(".data");
        e.emit("newline:   .asciiz \"\\n\"");
        for (String var : vars)
        {
            e.emit("var" + var + ":    .word 0     # default value of 0");
        }
        e.emit("\n");
        e.emit(".text");
        e.emit(".globl main");
        e.emit("main:");
        e.emit("\n");
        stmt.compile(e);
        e.emit("li $v0 10");
        e.emit("syscall # halt");
        for (ProcedureDeclaration proDec : proDecs)
        {
            proDec.compile(e);
        }
        e.close();
    }
}